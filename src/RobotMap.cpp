// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
Gyro* RobotMap::drivetrainGyro = NULL;
DoubleSolenoid* RobotMap::boxGrabberSolenoid = NULL;
Compressor* RobotMap::boxGrabberCompressor = NULL;
Encoder* RobotMap::boxPulleySystemBoxPulleyEncoder = NULL;
SpeedController* RobotMap::boxPulleySystemBoxPulleyTalon = NULL;
Encoder* RobotMap::canPulleySystemCanPulleyEncoder = NULL;
SpeedController* RobotMap::canPulleySystemBoxPulleyTalon = NULL;
SpeedController* RobotMap::wheelSubsystemFrontController = NULL;
SpeedController* RobotMap::wheelSubsystemRightController = NULL;
SpeedController* RobotMap::wheelSubsystemBackController = NULL;
SpeedController* RobotMap::wheelSubsystemLeftController = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
#if 0
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	drivetrainGyro = new Gyro(0);
	lw->AddSensor("Drivetrain", "Gyro", drivetrainGyro);
	drivetrainGyro->SetSensitivity(0.007);
	boxGrabberSolenoid = new DoubleSolenoid(0, 0, 1);      
	lw->AddActuator("BoxGrabber", "Solenoid", boxGrabberSolenoid);
	
	boxGrabberCompressor = new Compressor(0);
	
	
	boxPulleySystemBoxPulleyEncoder = new Encoder(8, 9, false, Encoder::k4X);
	lw->AddSensor("BoxPulleySystem", "BoxPulleyEncoder", boxPulleySystemBoxPulleyEncoder);
	boxPulleySystemBoxPulleyEncoder->SetDistancePerPulse(1.0);
        boxPulleySystemBoxPulleyEncoder->SetPIDSourceParameter(Encoder::kRate);
	boxPulleySystemBoxPulleyTalon = new Talon(12);
	lw->AddActuator("BoxPulleySystem", "BoxPulleyTalon", (Talon*) boxPulleySystemBoxPulleyTalon);
	
	canPulleySystemCanPulleyEncoder = new Encoder(10, 11, false, Encoder::k4X);
	lw->AddSensor("CanPulleySystem", "CanPulleyEncoder", canPulleySystemCanPulleyEncoder);
	canPulleySystemCanPulleyEncoder->SetDistancePerPulse(1.0);
        canPulleySystemCanPulleyEncoder->SetPIDSourceParameter(Encoder::kRate);
	canPulleySystemBoxPulleyTalon = new Talon(3);
	lw->AddActuator("CanPulleySystem", "BoxPulleyTalon", (Talon*) canPulleySystemBoxPulleyTalon);
	
	wheelSubsystemFrontController = new Talon(14);
	lw->AddActuator("WheelSubsystem", "Front Controller", (Talon*) wheelSubsystemFrontController);
	
	wheelSubsystemRightController = new Talon(0);
	lw->AddActuator("WheelSubsystem", "Right Controller", (Talon*) wheelSubsystemRightController);
	
	wheelSubsystemBackController = new Talon(1);
	lw->AddActuator("WheelSubsystem", "Back Controller", (Talon*) wheelSubsystemBackController);
	
	wheelSubsystemLeftController = new Talon(15);
	lw->AddActuator("WheelSubsystem", "Left Controller", (Talon*) wheelSubsystemLeftController);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
#endif

	LiveWindow* lw = LiveWindow::GetInstance();

	wheelSubsystemFrontController = new CANTalon(14);

	wheelSubsystemBackController = new CANTalon(1);

	wheelSubsystemLeftController = new CANTalon(15);

	wheelSubsystemRightController = new CANTalon(0);

	wheelSubsystemFrontController = new Talon(14);
	lw->AddActuator("WheelSubsystem", "Front Controller", (Talon*) wheelSubsystemFrontController);

	drivetrainGyro = new Gyro(0);
	lw->AddSensor("Drivetrain", "Gyro", drivetrainGyro);
	drivetrainGyro->SetSensitivity(0.007);
	boxGrabberSolenoid = new DoubleSolenoid(0, 1, 0);
	lw->AddActuator("BoxGrabber", "Solenoid", boxGrabberSolenoid);

	boxPulleySystemBoxPulleyTalon = new CANTalon(3);

	canPulleySystemBoxPulleyTalon = new CANTalon(12);

#if 0
	drivetrainFrontEncoder->SetDistancePerPulse(1.0);
	drivetrainFrontEncoder->SetPIDSourceParameter(Encoder::kRate);
	drivetrainBackEncoder = new Encoder(2, 3, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Back Encoder", drivetrainBackEncoder);
	drivetrainBackEncoder->SetDistancePerPulse(1.0);
	drivetrainBackEncoder->SetPIDSourceParameter(Encoder::kRate);
	drivetrainLeftEncoder = new Encoder(4, 5, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Left Encoder", drivetrainLeftEncoder);
	drivetrainLeftEncoder->SetDistancePerPulse(1.0);
	drivetrainLeftEncoder->SetPIDSourceParameter(Encoder::kRate);
	drivetrainRightEncoder = new Encoder(6, 7, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Right Encoder", drivetrainRightEncoder);
	drivetrainRightEncoder->SetDistancePerPulse(1.0);
	drivetrainRightEncoder->SetPIDSourceParameter(Encoder::kRate);
#endif

	//lidarTest = new LIDAR();
}
