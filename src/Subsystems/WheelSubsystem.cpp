// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "WheelSubsystem.h"
#include "../RobotMap.h"

#if 0
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

WheelSubsystem::WheelSubsystem() : Subsystem("WheelSubsystem") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	frontController = RobotMap::wheelSubsystemFrontController;
	rightController = RobotMap::wheelSubsystemRightController;
	backController = RobotMap::wheelSubsystemBackController;
	leftController = RobotMap::wheelSubsystemLeftController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
#endif
    
WheelSubsystem::WheelSubsystem(int wheel) : Subsystem("WheelSubsystem") {
	frontController = RobotMap::wheelSubsystemFrontController;
	rightController = RobotMap::wheelSubsystemRightController;
	backController = RobotMap::wheelSubsystemBackController;
	leftController = RobotMap::wheelSubsystemLeftController;
	this->cont = wheel;
}

void WheelSubsystem::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void WheelSubsystem::SetRawMotorSpeed(double speed)
{
	switch(cont)
	{
	case 0:
		frontController->Set(speed);
		break;
	case 1:
		rightController->Set(speed);
		break;
	case 2:
		backController->Set(speed);
		break;
	case 3:
		leftController->Set(speed);
		break;
	}
}
